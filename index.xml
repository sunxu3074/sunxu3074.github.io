<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ban&amp;pick</title>
    <link>http://isunxu.xyz/</link>
    <description>Recent content on ban&amp;pick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2015, Xu Sun; all rights reserved.</copyright>
    <lastBuildDate>Mon, 04 Jan 2016 18:06:04 +0800</lastBuildDate>
    <atom:link href="http://isunxu.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>《Android 50 Hacks》读书笔记-布局篇</title>
      <link>http://isunxu.xyz/android/android-50-hack-part-1/</link>
      <pubDate>Mon, 04 Jan 2016 18:06:04 +0800</pubDate>
      
      <guid>http://isunxu.xyz/android/android-50-hack-part-1/</guid>
      <description>

&lt;p&gt;最近在&lt;a href=&#34;http://www.it-ebooks.info/&#34;&gt;http://www.it-ebooks.info/&lt;/a&gt;看见了一本《50 Android Hacks》,感觉还好.在这里写一下读书笔记.&lt;/p&gt;

&lt;p&gt;前言:&lt;/p&gt;

&lt;p&gt;我不知道作为一个没过四级的人是怎么看完这本书的.记得以前英语考试时,读阅读时总是不耐心,读着读着就烦气了.后来的考试总是喜欢看着答案蒙.至于现在为什么能耐心阅读关于计算机的一些英文文档,可能就是我对自己有野心,对程序员这个行业有野心吧.希望有一天我能骄傲地跟别人说我是一个程序员.&lt;/p&gt;

&lt;h3 id=&#34;hack-1-centering-views-using-weights-android-v1-6:1e33089dd85e7ee1909260ca9a39f4a5&#34;&gt;Hack 1 Centering views using weights (Android v1.6+)&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;What should I write if I want a but- ton to be centered and 50% of its parent width?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
android:layout_width=&amp;quot;fill_parent&amp;quot;
android:layout_height=&amp;quot;fill_parent&amp;quot;
android:background=&amp;quot;#FFFFFF&amp;quot;
android:gravity=&amp;quot;center&amp;quot;
android:orientation=&amp;quot;horizontal&amp;quot;
android:weightSum=&amp;quot;1&amp;quot;&amp;gt;
&amp;lt;Button
    android:layout_width=&amp;quot;0dp&amp;quot;
    android:layout_height=&amp;quot;wrap_content&amp;quot;
    android:layout_weight=&amp;quot;0.5&amp;quot;
    android:text=&amp;quot;Click me&amp;quot;/&amp;gt;
&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意LinearLayout中的属性 &lt;em&gt;android:weightSum&lt;/em&gt; . 默认情况下weightSum的值是父控件里面所有child的数量.&lt;/p&gt;

&lt;p&gt;上面这段代码实现了button的width是父控件的50%.
&amp;gt;计算公式:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Button&amp;rsquo;s width + Button&amp;rsquo;s weight * 200 / sum(weight);(假设LinearLayout的宽度是200)&lt;/p&gt;

&lt;p&gt;也就是 控件宽度+父控件剩余宽度*比例 (首先按照控件声明的尺寸进行分配,然后剩下的尺寸按照weight分配)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;hack-2-using-lazy-loading-and-avoiding-replication-android-v1-6:1e33089dd85e7ee1909260ca9a39f4a5&#34;&gt;Hack 2 Using lazy loading and avoiding replication (Android v1.6+)&lt;/h3&gt;

&lt;p&gt;这个技巧将会学到:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用 &lt;em&gt;include&lt;/em&gt; 标签避免xml代码的重复&lt;/li&gt;
&lt;li&gt;使用ViewStub Class实现视图的懒加载&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-1-avoid-replication-using-the-include-tag:1e33089dd85e7ee1909260ca9a39f4a5&#34;&gt;2.1 Avoid replication using the &lt;include /&gt; tag&lt;/h4&gt;

&lt;p&gt;我们想象一下在我们应用的每一个页面中添加一个同样的页脚,例如一个只带有应用名字的TextView.如果我们有很多个Activity,很多个xml文件.我们该怎么编辑它们?复制粘贴将会解决这个问题,但是看上去不是高效的.一个简单的途径就是用 &lt;em&gt;include&lt;/em&gt; 标签添加这个页脚到我们应用里.我们的其中一个Activity的xml文件就可以像这样:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
   &amp;gt;
  &amp;lt;TextView
    android:layout_width=&amp;quot;fill_parent&amp;quot;
    android:layout_height=&amp;quot;wrap_content&amp;quot;
    android:layout_centerInParent=&amp;quot;true&amp;quot;
    android:gravity=&amp;quot;center_horizontal&amp;quot;
    android:text=&amp;quot;@string/hello&amp;quot;/&amp;gt;
  &amp;lt;include layout=&amp;quot;@layout/footer&amp;quot;/&amp;gt;
&amp;lt;/RelativeLayout/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;footer的xml代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt; &amp;lt;TextView xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
        android:layout_width=&amp;quot;fill_parent&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:layout_alignParentBottom=&amp;quot;true&amp;quot;
        android:layout_marginBottom=&amp;quot;30dp&amp;quot;
        android:gravity=&amp;quot;center_horizontal&amp;quot;
        android:text=&amp;quot;@string/footer_text&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在第一个例子里面,我们在单独的footer.xml定义属性.可当Activity的xml中父控件是LinearLayout呢?我们再在footer.xml定义上面这些属性就无效了,因为像android:layout_marginBottom这些属性是在RelativeLayout才有效的.下面介绍第二种方式,在 &lt;em&gt;include&lt;/em&gt; 标签内定义android:layout_*这些属性.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
        android:layout_width=&amp;quot;fill_parent&amp;quot;
        android:layout_height=&amp;quot;fill_parent&amp;quot;&amp;gt;

        &amp;lt;TextView
            android:layout_width=&amp;quot;fill_parent&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:layout_centerInParent=&amp;quot;true&amp;quot;
            android:gravity=&amp;quot;center_horizontal&amp;quot;
            android:text=&amp;quot;@string/hello&amp;quot;/&amp;gt;

        &amp;lt;include
            layout=&amp;quot;@layout/footer&amp;quot;
            android:layout_width=&amp;quot;fill_parent&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:layout_alignParentBottom=&amp;quot;true&amp;quot;
            android:layout_marginBottom=&amp;quot;30dp&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改过后的footer.xml:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;TextView xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
            android:layout_width=&amp;quot;0dp&amp;quot;
            android:layout_height=&amp;quot;0dp&amp;quot;
            android:gravity=&amp;quot;center&amp;quot;
            android:text=&amp;quot;@string/footer_text&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意footer.xml中的宽和高都要设置才能被有效覆盖.&lt;/p&gt;

&lt;h4 id=&#34;2-2-lazy-loading-views-with-the-viewstub-class:1e33089dd85e7ee1909260ca9a39f4a5&#34;&gt;2.2 Lazy loading views with the ViewStub class&lt;/h4&gt;

&lt;p&gt;ViewStub Class:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A ViewStub is an invisible, zero-sized View that can be used to lazily inflate layout resources at runtime. When a ViewStub is made visible, or when inflate() is invoked, the layout resource is inflated. The ViewStub then replaces itself in its parent with the inflated View or Views.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你已经知道了ViewStub是什么,让我们来看一下该怎么用.在下面的例子中,你将会用一个ViewStub去懒加载 &lt;em&gt;MapView&lt;/em&gt; .想象创建一个用来描述地方详细信息的View.我们来看以下两种情况:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一些地区没有GPS信息&lt;/li&gt;
&lt;li&gt;用户可能不需要地图展示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SampleCode:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
    &amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
        android:layout_width=&amp;quot;fill_parent&amp;quot;
        android:layout_height=&amp;quot;fill_parent&amp;quot;&amp;gt;

        &amp;lt;Button
            android:layout_width=&amp;quot;fill_parent&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:text=&amp;quot;@string/show_map&amp;quot;
            android:onClick=&amp;quot;onShowMap&amp;quot;/&amp;gt;

        &amp;lt;ViewStub
            android:id=&amp;quot;@+id/map_stub&amp;quot;
            android:layout_width=&amp;quot;fill_parent&amp;quot;
            android:layout_height=&amp;quot;fill_parent&amp;quot;
            android:layout=&amp;quot;@layout/map&amp;quot;
            android:inflatedId=&amp;quot;@+id/map_view&amp;quot;/&amp;gt;
    &amp;lt;/RelativeLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;很明显,我们在Activity中用map_stub得到ViewStub,layout属性告诉ViewStub应该去加载哪个布局文件.&lt;/p&gt;

&lt;p&gt;map.xml代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;com.google.android.maps.MapView xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
        android:layout_width=&amp;quot;fill_parent&amp;quot;
        android:layout_height=&amp;quot;fill_parent&amp;quot;
        android:clickable=&amp;quot;true&amp;quot;
        android:apiKey=&amp;quot;my_api_key&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们需要讨论的是最后这个属性android:inflatedId.我们可以用 &lt;em&gt;inflate()&lt;/em&gt; 或者 &lt;em&gt;setVisibility&lt;/em&gt; 方法让这个View显示出来.在这个例子中,我们用了 &lt;em&gt;setVisibility(View.VISIBLE)&lt;/em&gt; ,因为我们不要对这个MapView做任何事情.如果我们需要得到一个引用, &lt;em&gt;inflate()&lt;/em&gt; 会返回这个View避免第二次去调用 &lt;em&gt;findViewById()&lt;/em&gt; .&lt;/p&gt;

&lt;p&gt;Activity 代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; public class MainActivity extends MapActivity {
        private View mViewStub;


        @Override public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.main);
            mViewStub = findViewById(R.id.map_stub);
        }


        public void onShowMap(View v) {
            mViewStub.setVisibility(View.VISIBLE);
        }


        ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像你看见的一样,是否展示这个地图只需要改变ViewStub的 &lt;em&gt;visibility&lt;/em&gt; 变量值即可.&lt;/p&gt;

&lt;h3 id=&#34;hack-3-creating-a-custom-viewgroup-android-v1-6:1e33089dd85e7ee1909260ca9a39f4a5&#34;&gt;Hack 3 Creating a custom ViewGroup (Android v1.6+)&lt;/h3&gt;

&lt;p&gt;当你正在设计App时,可能在页面中会有复杂的视图去展示.想象你正在创建一个纸牌游戏,并像下图的那样展示手牌.该怎么创建这个视图呢？&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://isunxu.xyz/media/50hacks-1-1.png&#34; alt=&#34;50hacks-1-1&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;可以在RelativeLayout中设置margin,这是可行的.代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
    &amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
        android:layout_width=&amp;quot;fill_parent&amp;quot;
        android:layout_height=&amp;quot;fill_parent&amp;quot;&amp;gt;

        &amp;lt;View
            android:layout_width=&amp;quot;100dp&amp;quot;
            android:layout_height=&amp;quot;150dp&amp;quot;
            android:background=&amp;quot;#FF0000&amp;quot;/&amp;gt;

        &amp;lt;View
            android:layout_width=&amp;quot;100dp&amp;quot;
            android:layout_height=&amp;quot;150dp&amp;quot;
            android:layout_marginLeft=&amp;quot;30dp&amp;quot;
            android:layout_marginTop=&amp;quot;20dp&amp;quot;
            android:background=&amp;quot;#00FF00&amp;quot;/&amp;gt;

        &amp;lt;View
            android:layout_width=&amp;quot;100dp&amp;quot;
            android:layout_height=&amp;quot;150dp&amp;quot;
            android:layout_marginLeft=&amp;quot;60dp&amp;quot;
            android:layout_marginTop=&amp;quot;40dp&amp;quot;
            android:background=&amp;quot;#0000FF&amp;quot;/&amp;gt;
    &amp;lt;/RelativeLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果是介个样子的:&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://isunxu.xyz/media/50hacks-1-2.png&#34; alt=&#34;50hacks-1-2&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;下面介绍另外一种方式来创建相同类型的布局&amp;ndash;创建一个自定义 &lt;em&gt;ViewGroup&lt;/em&gt; .相比在xml中手动添加margins,自定义 &lt;em&gt;ViewGroup&lt;/em&gt; 的优点有:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;It’s easier to maintain if you’re using it in differ- ent activities.&lt;/li&gt;
&lt;li&gt;You can use custom attributes to customize the position of the ViewGroup chil- dren.&lt;/li&gt;
&lt;li&gt;The XML will be easier to understand because it’ll be more concise.&lt;/li&gt;
&lt;li&gt;If you need to change the margins, you won’t need to recalculate by hand every
child’s margin.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;3-1-understanding-how-android-draws-views:1e33089dd85e7ee1909260ca9a39f4a5&#34;&gt;3.1 Understanding how Android draws views&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Drawing the layout is a two-pass process: a measure pass and a layout pass. The measuring pass is implemented in measure(int, int) and is a top-down traversal of the View tree. Each View pushes dimension specifications down the tree during the recursion. At the end of the measure pass, every View has stored its measurements. The second pass happens in layout(int, int, int, int) and is also top-down. During this pass each parent is responsible for positioning all of its children using the sizes computed in the measure pass.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了理解这个概念,我们来分析一下绘制 &lt;em&gt;ViewGroup&lt;/em&gt; 的方式.第一步在 &lt;em&gt;onMeasure()&lt;/em&gt; 这个方法里面去测量宽和高.在这个方法里面, &lt;em&gt;ViewGroup&lt;/em&gt; 会通过里面的子视图来计算它的大小.第二步通过在 &lt;em&gt;onLayout()&lt;/em&gt; 这个方法里面去放置它的子视图.在这个方法里面, &lt;em&gt;ViewGroup&lt;/em&gt; 通过在 &lt;em&gt;onMeasure()&lt;/em&gt; 方法里收集到子视图的信息来放置它们.&lt;/p&gt;

&lt;h4 id=&#34;3-2-creating-the-cascadelayout:1e33089dd85e7ee1909260ca9a39f4a5&#34;&gt;3.2 Creating the CascadeLayout&lt;/h4&gt;

&lt;p&gt;xml代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;FrameLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    xmlns:cascade=&amp;quot;http://schemas.android.com/apk/res-auto&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;&amp;gt;

    &amp;lt;com.manning.androidhacks.hack003.view.CascadeLayout
        android:layout_width=&amp;quot;fill_parent&amp;quot;
        android:layout_height=&amp;quot;fill_parent&amp;quot;
        cascade:horizontal_spacing=&amp;quot;30dp&amp;quot;
        cascade:vertical_spacing=&amp;quot;20dp&amp;quot;&amp;gt;

        &amp;lt;View
            android:layout_width=&amp;quot;100dp&amp;quot;
            android:layout_height=&amp;quot;150dp&amp;quot;
            android:background=&amp;quot;#FF0000&amp;quot;/&amp;gt;

        &amp;lt;View
            android:layout_width=&amp;quot;100dp&amp;quot;
            android:layout_height=&amp;quot;150dp&amp;quot;
            android:background=&amp;quot;#00FF00&amp;quot;/&amp;gt;

        &amp;lt;View
            android:layout_width=&amp;quot;100dp&amp;quot;
            android:layout_height=&amp;quot;150dp&amp;quot;
            android:background=&amp;quot;#0000FF&amp;quot;/&amp;gt;
    &amp;lt;/com.manning.androidhacks.hack003.view.CascadeLayout&amp;gt;
&amp;lt;/FrameLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着,我们来定义这些自定义属性.在 &lt;em&gt;res/values&lt;/em&gt; 这个文件夹下创建 &lt;em&gt;attrs.xml&lt;/em&gt; .代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
    &amp;lt;resources&amp;gt;

        &amp;lt;declare-styleable name=&amp;quot;CascadeLayout&amp;quot;&amp;gt;

            &amp;lt;attr
                name=&amp;quot;horizontal_spacing&amp;quot;
                format=&amp;quot;dimension&amp;quot;/&amp;gt;

            &amp;lt;attr
                name=&amp;quot;vertical_spacing&amp;quot;
                format=&amp;quot;dimension&amp;quot;/&amp;gt;
        &amp;lt;/declare-styleable&amp;gt;
    &amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;em&gt;res/values/dimens.xml&lt;/em&gt; 中定义自定义属性的值.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
    &amp;lt;resources&amp;gt;
        &amp;lt;dimen name=&amp;quot;cascade_horizontal_spacing&amp;quot;&amp;gt;10dp&amp;lt;/dimen&amp;gt;
        &amp;lt;dimen name=&amp;quot;cascade_vertical_spacing&amp;quot;&amp;gt;10dp&amp;lt;/dimen&amp;gt;
    &amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在理解完Android怎样绘制视图后,你可能该想着去创建一个 &lt;em&gt;CascadeLayout&lt;/em&gt; 的类去继承 &lt;em&gt;ViewGroup&lt;/em&gt; ,在这个类里面去重写 &lt;em&gt;onMeasure()&lt;/em&gt; 和 &lt;em&gt;onLayout()&lt;/em&gt; 这两个方法.因为代码有一点长,我们分三部分来分析:构造方法, &lt;em&gt;onMeasure()&lt;/em&gt; , &lt;em&gt;onLayout()&lt;/em&gt; .
下面是构造方法的代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class CascadeLayout extends ViewGroup {
    private int mHorizontalSpacing;
    private int mVerticalSpacing;

    // Constructor called when view instance is created from an XML file.
    public CascadeLayout(Context context, AttributeSet attrs) {
        // mHorizontalSpacing and mVerticalSpacing are read from custom attributes. If they’re not present, use default values.
        super(context, attrs);
        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CascadeLayout);
        try {
            mHorizontalSpacing = a.getDimensionPixelSize(R.styleable.CascadeLayout_horizontal_spacing,
                    getResources().getDimensionPixelSize(R.dimen.cascade_horizontal_spacing));
            mVerticalSpacing = a.getDimensionPixelSize(R.styleable.CascadeLayout_vertical_spacing,
                    getResources().getDimensionPixelSize(R.dimen.cascade_vertical_spacing));
        } finally {
            a.recycle();
        }
    }
    
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;em&gt;onMeasure()&lt;/em&gt; 这个方法里面写代码前,我们创建一个自定义的 &lt;em&gt;LayoutParams&lt;/em&gt; 类,作为 &lt;em&gt;CascadeLayout&lt;/em&gt; 的内部类,为每一个子view保留x,y的坐标值.代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static class LayoutParams extends ViewGroup.LayoutParams {
        int x;
        int y;


        public LayoutParams(Context context, AttributeSet attrs) {
            super(context, attrs);
        }


        public LayoutParams(int w, int h) {
            super(w, h);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了去使用 &lt;em&gt;CascadeLayout.LayoutParams&lt;/em&gt; 这个类,我们需要在 &lt;em&gt;CascadeLayout&lt;/em&gt; 这个类中重写一些额外的方法: &lt;em&gt;checkLayoutParams()&lt;/em&gt; , &lt;em&gt;generateDefaultLayoutParams()&lt;/em&gt; , &lt;em&gt;generateLayoutParams(AttributeSet attrs)&lt;/em&gt; , &lt;em&gt;generateLayoutParams(ViewGroup.LayoutParams p)&lt;/em&gt; .代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    @Override protected boolean checkLayoutParams(ViewGroup.LayoutParams p) {
        return p instanceof LayoutParams;
    }


    @Override protected LayoutParams generateDefaultLayoutParams() {
        return new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
    }


    @Override public LayoutParams generateLayoutParams(AttributeSet attrs) {
        return new LayoutParams(getContext(), attrs);
    }


    @Override protected LayoutParams generateLayoutParams(ViewGroup.LayoutParams p) {
        return new LayoutParams(p.width, p.height);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;onMeasure()&lt;/em&gt; ,是这个类的关键.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override 
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
	     // Use width and height to calculate layout’s final size and children’s x and y positions.
        int width = 0;
        int height = getPaddingTop();
        final int count = getChildCount();
        for (int i = 0; i &amp;lt; count; i++) {
            View child = getChildAt(i);
            // Make every child measure itself.
            measureChild(child, widthMeasureSpec, heightMeasureSpec);
            ￼LayoutParams lp = (LayoutParams) child.getLayoutParams();
            width = getPaddingLeft() + mHorizontalSpacing * i;
            lp.x = width;
            lp.y = height;
            width += child.getMeasuredWidth();
            height += mVerticalSpacing;
        } 
        width += getPaddingRight();
        height += getChildAt(getChildCount() - 1).getMeasuredHeight() + getPaddingBottom();
        // Uses calculated width and height to set measured dimensions of whole layout.
        setMeasuredDimension(resolveSize(width, widthMeasureSpec), resolveSize(height, heightMeasureSpec));
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后一步是创建 &lt;em&gt;onLayout()&lt;/em&gt; .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override 
protected void onLayout(boolean changed, int l, int t, int r, int b) {
        final int count = getChildCount();
        for (int i = 0; i &amp;lt; count; i++) {
            View child = getChildAt(i);
            LayoutParams lp = (LayoutParams) child.getLayoutParams();
            child.layout(lp.x, lp.y, lp.x + child.getMeasuredWidth(), lp.y + child.getMeasuredHeight());
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-3-adding-custom-attributes-to-the-children:1e33089dd85e7ee1909260ca9a39f4a5&#34;&gt;3.3 Adding custom attributes to the children&lt;/h4&gt;

&lt;p&gt;在最后一个章节中,你将会学到如何为子视图添加自定义属性.例如,为一个特定的子视图重新定义垂直间距.如下图&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://isunxu.xyz/media/50hacks-1-3.png&#34; alt=&#34;50hacks-1-3&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;添加新的属性到 &lt;em&gt;attrs.xml&lt;/em&gt; 中:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;declare-styleable name=&amp;quot;CascadeLayout_LayoutParams&amp;quot;&amp;gt;
        &amp;lt;attr name=&amp;quot;layout_vertical_spacing&amp;quot;
            format=&amp;quot;dimension&amp;quot;/&amp;gt;
    &amp;lt;/declare-styleable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为这个属性名是以 &lt;em&gt;layout_&lt;/em&gt; 开始的,所以它被添加到 &lt;em&gt;LayoutParams&lt;/em&gt; 属性中.在 &lt;em&gt;LayoutParams&lt;/em&gt; 这个构造方法中取出这个属性.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; public LayoutParams(Context context, AttributeSet attrs) {
        super(context, attrs);
        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CascadeLayout_LayoutParams);
        try {
            verticalSpacing = a.getDimensionPixelSize(R.styleable.CascadeLayout_LayoutParams_layout_vertical_spacing,
                    -1);
        } finally {
            a.recycle();
        }
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;verticalSpacing&lt;/em&gt; 是一个 &lt;em&gt;public field&lt;/em&gt; .我们会在 &lt;em&gt;CascadeLayout&lt;/em&gt; 中用到,如果子视图的 &lt;em&gt;LayoutParams&lt;/em&gt; 中包含 &lt;em&gt;verticalSpacing&lt;/em&gt; ,我们就可以使用它.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; verticalSpacing = mVerticalSpacing;
        ...
        LayoutParams lp = (LayoutParams) child.getLayoutParams();
        if (lp.verticalSpacing &amp;gt;= 0) {
            verticalSpacing = lp.verticalSpacing;
        }
        ...
        width += child.getMeasuredWidth();
        height += verticalSpacing;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hack-4-preferences-hacks-android-v1-6:1e33089dd85e7ee1909260ca9a39f4a5&#34;&gt;Hack 4 Preferences hacks (Android v1.6+)&lt;/h3&gt;

&lt;p&gt;定义一个偏好设置界面,只需要写一些xml,就可以快速生成.大家看代码就可以懂了,跟自定义view类似.&lt;/p&gt;

&lt;p&gt;效果图:&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://isunxu.xyz/media/50hacks-1-4.png&#34; alt=&#34;50hacks-1-4&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;在 &lt;em&gt;res/xml&lt;/em&gt; 中创建 &lt;em&gt;prefs.xml&lt;/em&gt; .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;!--
  Copyright (c) 2012 Manning
  See the file license.txt for copying permission.
--&amp;gt;

&amp;lt;PreferenceScreen
    xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    android:key=&amp;quot;pref_first_preferencescreen_key&amp;quot;
    android:title=&amp;quot;Preferences&amp;quot;&amp;gt;

    &amp;lt;PreferenceCategory
        android:title=&amp;quot;User&amp;quot;&amp;gt;

        &amp;lt;EditTextPreference
            android:key=&amp;quot;pref_username&amp;quot;
            android:summary=&amp;quot;Username:&amp;quot;
            android:title=&amp;quot;Username&amp;quot;/&amp;gt;

    &amp;lt;/PreferenceCategory&amp;gt;

    &amp;lt;PreferenceCategory
        android:title=&amp;quot;Application&amp;quot;&amp;gt;

        &amp;lt;Preference
            android:key=&amp;quot;pref_rate&amp;quot;
            android:summary=&amp;quot;Rate the app in the store!&amp;quot;
            android:title=&amp;quot;Rate the app&amp;quot;/&amp;gt;

        &amp;lt;Preference
            android:key=&amp;quot;pref_share&amp;quot;
            android:summary=&amp;quot;Share the app with your friends&amp;quot;
            android:title=&amp;quot;Share it&amp;quot;/&amp;gt;

        &amp;lt;com.manning.androidhacks.hack004.preference.EmailDialog
            android:dialogIcon=&amp;quot;@drawable/ic_launcher&amp;quot;
            android:dialogTitle=&amp;quot;Send Feedback&amp;quot;
            android:dialogMessage=&amp;quot;Do you want to send an email with feedback?&amp;quot;
            android:key=&amp;quot;pref_sendemail_key&amp;quot;
            android:negativeButtonText=&amp;quot;Cancel&amp;quot;
            android:positiveButtonText=&amp;quot;OK&amp;quot;
            android:summary=&amp;quot;Send your feedback by e-mail&amp;quot;
            android:title=&amp;quot;Send Feedback&amp;quot;/&amp;gt;

        &amp;lt;com.manning.androidhacks.hack004.preference.AboutDialog
            android:dialogIcon=&amp;quot;@drawable/ic_launcher&amp;quot;
            android:dialogTitle=&amp;quot;About&amp;quot;
            android:key=&amp;quot;pref_about_key&amp;quot;
            android:negativeButtonText=&amp;quot;@null&amp;quot;
            android:title=&amp;quot;About&amp;quot;/&amp;gt;

    &amp;lt;/PreferenceCategory&amp;gt;

&amp;lt;/PreferenceScreen&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;xml会创建好视图,我们只需在activity中写好逻辑即可.不一样的是,activity需要继承 &lt;em&gt;android.preference.PreferenceActivity&lt;/em&gt; .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MainActivity extends PreferenceActivity implements
    OnSharedPreferenceChangeListener {

  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    addPreferencesFromResource(R.xml.prefs);

    Preference sharePref = findPreference(&amp;quot;pref_share&amp;quot;);
    Intent shareIntent = new Intent();
    shareIntent.setAction(Intent.ACTION_SEND);
    shareIntent.setType(&amp;quot;text/plain&amp;quot;);
    shareIntent.putExtra(Intent.EXTRA_SUBJECT, &amp;quot;Check this app!&amp;quot;);
    shareIntent.putExtra(Intent.EXTRA_TEXT,
        &amp;quot;Check this awesome app at: ...&amp;quot;);
    sharePref.setIntent(shareIntent);

    Preference ratePref = findPreference(&amp;quot;pref_rate&amp;quot;);
    Uri uri = Uri.parse(&amp;quot;market://details?id=&amp;quot; + getPackageName());
    Intent goToMarket = new Intent(Intent.ACTION_VIEW, uri);
    ratePref.setIntent(goToMarket);

    updateUserText();
  }

  @Override
  protected void onResume() {
    super.onResume();

    getPreferenceScreen().getSharedPreferences()
        .registerOnSharedPreferenceChangeListener(this);

  }

  @Override
  protected void onPause() {
    super.onPause();

    getPreferenceScreen().getSharedPreferences()
        .unregisterOnSharedPreferenceChangeListener(this);
  }

  @Override
  public void onSharedPreferenceChanged(
      SharedPreferences sharedPreferences, String key) {

    if (key.equals(&amp;quot;pref_username&amp;quot;)) {
      updateUserText();
    }
  }

  private void updateUserText() {
    EditTextPreference pref;
    pref = (EditTextPreference) findPreference(&amp;quot;pref_username&amp;quot;);
    String user = pref.getText();

    if (user == null) {
      user = &amp;quot;?&amp;quot;;
    }

    pref.setSummary(String.format(&amp;quot;Username: %s&amp;quot;, user));
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自定义一个 &lt;em&gt;preferences&lt;/em&gt; 就像自定义view一样.为了更好地理解它,我们来看一下 &lt;em&gt;EmailDialog&lt;/em&gt; 这个类的代码.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Custom class should extend some of existing preferences widgets. In this case, we’ll use DialogPreference.

public class EmailDialog extends DialogPreference {
  Context mContext;

  public EmailDialog(Context context) {
    this(context, null);
  }

  public EmailDialog(Context context, AttributeSet attrs) {
    this(context, attrs, 0);
  }

  public EmailDialog(Context context, AttributeSet attrs, int defStyle) {
  
  // Constructors are the same as those used to create a custom view extending the View class.
  
    super(context, attrs, defStyle);
    mContext = context;
  }

  // onClick() is overridden. If users press OK button, then we’ll launch email Intent with helper class.
  
  @Override
  public void onClick(DialogInterface dialog, int which) {
    super.onClick(dialog, which);

    if (DialogInterface.BUTTON_POSITIVE == which) {
      LaunchEmailUtil.launchEmailToIntent(mContext);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好了,以上就是这本书的第一章了,完成了4/50.有什么不对的,或者建议,大家可以直接留言给我,也可以给我发邮件.&lt;/p&gt;

&lt;p&gt;15年就这么过去了,元旦那天朋友圈里,公众号里大家都在忙着自我检讨.想了想去年除了像每年一样都感觉孤独外,还有就是焦虑,每天都在焦虑.这一年有努力,有懈怠,有期待,有迷茫.知乎上的名字是taken2016,还没来得及改.记得当初起这名是想16年是收获的一年,而如今已经步入16年了.今年真的会是收获的一年咩?实在不行就换成taken2017吧:)不断积累,期待着,期待着.&lt;/p&gt;

&lt;p&gt;好了,写了点没用的.希望写的东西对大家有用,非常期待大家对我的建议,无论是生活上还是技术上.毕竟我还是个刚入职不到一年的小菜鸟~~&lt;/p&gt;

&lt;p&gt;最后,祝好:)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about me</title>
      <link>http://isunxu.xyz/about/</link>
      <pubDate>Wed, 09 Dec 2015 00:52:59 +0800</pubDate>
      
      <guid>http://isunxu.xyz/about/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;编程让我很快乐&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;待续&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;donate:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Donate&lt;/h3&gt;

&lt;h3 id=&#34;支付宝:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;支付宝&lt;/h3&gt;

&lt;figure&gt;
    &lt;img src=&#34;http://isunxu.xyz/media/alipay.jpg&#34; alt=&#34;alipay&#34;
    attr width=&#34;30%&#34;  /&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;微信:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;微信&lt;/h3&gt;

&lt;figure&gt;
    &lt;img src=&#34;http://isunxu.xyz/media/wechat.png&#34; alt=&#34;wechat&#34;
    attr width=&#34;30%&#34; /&gt;
&lt;/figure&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://isunxu.xyz/google4999e5e555b30243/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://isunxu.xyz/google4999e5e555b30243/</guid>
      <description>google-site-verification: google4999e5e555b30243.html</description>
    </item>
    
    <item>
      <title>Android Studio项目应该提交哪些文件到GitHub上</title>
      <link>http://isunxu.xyz/android/commit-what-to-github-in-as/</link>
      <pubDate>Fri, 11 Dec 2015 23:34:50 +0800</pubDate>
      
      <guid>http://isunxu.xyz/android/commit-what-to-github-in-as/</guid>
      <description>&lt;p&gt;在知乎上看到的提问,原问题链接: &lt;a href=&#34;http://www.zhihu.com/question/37910193&#34;&gt;http://www.zhihu.com/question/37910193&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当我们上传用AS写的Android代码时,上传没必要的代码不仅浪费空间,有时还会引起项目共同合作人员在提交代码时的冲突,那么究竟什么代码该上传,什么代码不该上传呢？&lt;/p&gt;

&lt;p&gt;查阅相关资料:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jetbrains.com/idea/help/project.html&#34;&gt;http://www.jetbrains.com/idea/help/project.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/amanoiverse/items/71b7dccf992b33930c35&#34;&gt;http://qiita.com/amanoiverse/items/71b7dccf992b33930c35&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/16736856/what-should-be-in-my-gitignore-for-an-android-studio-project&#34;&gt;http://stackoverflow.com/questions/16736856/what-should-be-in-my-gitignore-for-an-android-studio-project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/iainconnor/8605514&#34;&gt;https://gist.github.com/iainconnor/8605514&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drakeet/Meizhi/blob/master/.gitignore&#34;&gt;https://github.com/drakeet/Meizhi/blob/master/.gitignore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JakeWharton/butterknife/blob/master/.gitignore&#34;&gt;https://github.com/JakeWharton/butterknife/blob/master/.gitignore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bboyfeiyu/Colorful/blob/master/.gitignore&#34;&gt;https://github.com/bboyfeiyu/Colorful/blob/master/.gitignore&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;找了一些资料后,每个给出的答案都不一样,我把上面的答案总结后融合了一下添加到平常在在本地练习的 &lt;em&gt;.gitignore&lt;/em&gt; 文件中,并上传到Github上然后down下来重新导入,发现导入没有任何异常,运行顺利.&lt;/p&gt;

&lt;p&gt;融合后的 &lt;em&gt;.gitignore&lt;/em&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# IntelliJ IDEA
.idea
*.iml
*.ipr
*.iws

# Gradle
.gradle
gradlew.bat
build

# Local configuration file (sdk path, etc)
local.properties
reports
/captures

jacoco.exec

# Mac system files
.DS_Store


# Built application files
*.apk
*.ap_

# Android Studio captures folder
/captures


# Log Files
*.log

# Android Studio Navigation editor temp files
.navigation/

# files for the dex VM
*.dex

# Java class files
*.class

# generated files
bin/
gen/
out
lib

# Eclipse project files
.classpath
.project
.settings/
eclipsebin
.metadata/

# Proguard folder generated by Eclipse
proguard/

#NDK
obj/
jniLibs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上传到GitHub后的项目预览:

&lt;figure &gt;
    
        &lt;img src=&#34;http://isunxu.xyz/media/test-gitignore.png&#34; alt=&#34;test-gitignore&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;不需要额外的配置即可导入运行,那么这个融合的了 &lt;em&gt;.gitignore&lt;/em&gt; 就是可行的.&lt;/p&gt;

&lt;p&gt;回过头再来看Android Studio中的 &lt;em&gt;.gitignore&lt;/em&gt;,发现有绿色的代码,也有灰色的代码,当把鼠标移过去也会有不一样的提示.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://isunxu.xyz/media/test-gitignore-covered.png&#34; alt=&#34;test-gitignore-covered&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;有这种提示的就是文件已经包含在其他的文件夹中,可以删除这些文件.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://isunxu.xyz/media/test-gitignore-never-used.png&#34; alt=&#34;test-gitignore-never-used&#34; /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;有这种提示的就是工程中不包含这种文件,没必要申明在 *.gitignore*文件中,也可删除.&lt;/p&gt;

&lt;p&gt;那么我们删除了上述这种文件后, *.gitignore*马上就变得清爽起来.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# IntelliJ IDEA
.idea
*.iml

# Gradle
.gradle
build

# Local configuration file (sdk path, etc)
local.properties

# Mac system files
.DS_Store
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了科学严谨性,再次上传包含这份 &lt;em&gt;.gitignore&lt;/em&gt; 的代码到GitHub中,结构跟上面的图显示是一样的.&lt;/p&gt;

&lt;p&gt;再次down下来导入AS,运行依旧顺利.&lt;/p&gt;

&lt;p&gt;总结:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们当然可以把融合后比较多的代码模板复制到自己的 *.gitignore*文件中,这样会容错率高,有助于防止多传一些没必要的东西.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;也可以根据自己代码的实际情况根据提示,决定究竟该上传些什么代码,但应该大于等于上面最后这段代码.(如项目中用到了NDK,就可以加上/obj)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;总之就是提供给大家一种思路,才疏学浅,还请大家多多提意见给我.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最后,祝好:)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo静态网站生成不完全教程(不定期更新)</title>
      <link>http://isunxu.xyz/cs/make-personal-website-by-hugo/</link>
      <pubDate>Wed, 09 Dec 2015 22:31:48 +0800</pubDate>
      
      <guid>http://isunxu.xyz/cs/make-personal-website-by-hugo/</guid>
      <description>

&lt;h3 id=&#34;参考资料:49f2d3cb5c8cde2db974e263077945f1&#34;&gt;参考资料&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tonybai.com/2015/09/23/intro-of-gohugo/&#34;&gt;使用Hugo搭建静态站点 - by Tony Bai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nanshu.wang/post/2015-01-31/&#34;&gt;Hugo静态网站生成器中文教程 - by Nanshu Wang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.coderzh.com/2015/08/29/hugo/&#34;&gt;使用hugo搭建个人博客站点 - by Coderzh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;阅读官方文档:49f2d3cb5c8cde2db974e263077945f1&#34;&gt;阅读官方文档&lt;/h3&gt;

&lt;p&gt;相信你读了上面的资料就会很轻松的搭建自己的博客了.如果还不是很明白,那么恭喜你,跟我一样笨.
笨就没办法了,去&lt;a href=&#34;http://guhugo.io&#34;&gt;hugo官方网站&lt;/a&gt;读Docs.读完之后你大概能明白到底是怎么回事了,每个文件都是干什么的,怎么改模板等等,从一个小白变成一个不太白,顺便了解一下 &lt;em&gt;Go&lt;/em&gt; 语言的语法.&lt;/p&gt;

&lt;p&gt;官网上值得推荐给大家的是:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/community/press/&#34;&gt;关于hugo的博客&lt;/a&gt;,英文居多,也有少量中文的,自己斟酌选读.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;hugo的主题模板&lt;/a&gt;,非常符合hugo的设计理念&lt;em&gt;to be the perfect balance betweensimplicity and functionality&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;关于如何方便快捷地发布到 &lt;em&gt;Github Pages&lt;/em&gt; 上,有很多方案.利用 &lt;em&gt;wercker&lt;/em&gt; , &lt;em&gt;webhook&lt;/em&gt; 等等,上面的博客和官网都有提到,不再赘述.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;github-ribbons:49f2d3cb5c8cde2db974e263077945f1&#34;&gt;GitHub Ribbons&lt;/h3&gt;

&lt;p&gt;设置GitHub Ribbons,Github官网给出解决方案.&lt;a href=&#34;https://github.com/blog/273-github-ribbons&#34;&gt;在这里&lt;/a&gt; 选中你喜欢的 &lt;em&gt;Ribbons&lt;/em&gt; .代码中href属性中的字段换成自己的Github网址,复制到 &lt;em&gt;/layouts/partials/head_includes.html/&lt;/em&gt; 中即可生效.&lt;/p&gt;

&lt;h3 id=&#34;添加rss:49f2d3cb5c8cde2db974e263077945f1&#34;&gt;添加RSS&lt;/h3&gt;

&lt;p&gt;参考: &lt;a href=&#34;http://gohugo.io/templates/rss/&#34;&gt;http://gohugo.io/templates/rss/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RSS2.0模板&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;rss version=&amp;quot;2.0&amp;quot; xmlns:atom=&amp;quot;http://www.w3.org/2005/Atom&amp;quot;&amp;gt;
  &amp;lt;channel&amp;gt;
    &amp;lt;title&amp;gt;{{ with .Title }}{{.}} on {{ end }}{{ .Site.Title }}&amp;lt;/title&amp;gt;
    &amp;lt;link&amp;gt;{{ .Permalink }}&amp;lt;/link&amp;gt;
    &amp;lt;description&amp;gt;Recent content {{ with .Title }}in {{.}} {{ end }}on {{ .Site.Title }}&amp;lt;/description&amp;gt;
    &amp;lt;generator&amp;gt;Hugo -- gohugo.io&amp;lt;/generator&amp;gt;{{ with .Site.LanguageCode }}
    &amp;lt;language&amp;gt;{{.}}&amp;lt;/language&amp;gt;{{end}}{{ with .Site.Author.email }}
    &amp;lt;managingEditor&amp;gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}&amp;lt;/managingEditor&amp;gt;{{end}}{{ with .Site.Author.email }}
    &amp;lt;webMaster&amp;gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}&amp;lt;/webMaster&amp;gt;{{end}}{{ with .Site.Copyright }}
    &amp;lt;copyright&amp;gt;{{.}}&amp;lt;/copyright&amp;gt;{{end}}{{ if not .Date.IsZero }}
    &amp;lt;lastBuildDate&amp;gt;{{ .Date.Format &amp;quot;Mon, 02 Jan 2006 15:04:05 -0700&amp;quot; | safeHTML }}&amp;lt;/lastBuildDate&amp;gt;{{ end }}
    &amp;lt;atom:link href=&amp;quot;{{.URL}}&amp;quot; rel=&amp;quot;self&amp;quot; type=&amp;quot;application/rss+xml&amp;quot; /&amp;gt;
    {{ range first 15 .Data.Pages }}
    &amp;lt;item&amp;gt;
      &amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
      &amp;lt;link&amp;gt;{{ .Permalink }}&amp;lt;/link&amp;gt;
      &amp;lt;pubDate&amp;gt;{{ .Date.Format &amp;quot;Mon, 02 Jan 2006 15:04:05 -0700&amp;quot; | safeHTML }}&amp;lt;/pubDate&amp;gt;
      {{ with .Site.Author.email }}&amp;lt;author&amp;gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}&amp;lt;/author&amp;gt;{{end}}
      &amp;lt;guid&amp;gt;{{ .Permalink }}&amp;lt;/guid&amp;gt;
      &amp;lt;description&amp;gt;{{ .Content | html }}&amp;lt;/description&amp;gt;
    &amp;lt;/item&amp;gt;
    {{ end }}
  &amp;lt;/channel&amp;gt;
&amp;lt;/rss&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把上面这段代码分别复制到&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/rss.xml&lt;/li&gt;
&lt;li&gt;/layouts/_default/rss.xml&lt;/li&gt;
&lt;li&gt;/layouts/section/SECTION.rss.xml&lt;/li&gt;
&lt;li&gt;/layouts/_default/rss.xml&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/section/SECTION.rss.xml&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/_default/rss.xml&lt;/li&gt;
&lt;li&gt;/layouts/taxonomy/SINGULAR.rss.xml&lt;/li&gt;
&lt;li&gt;/layouts/_default/rss.xml&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/taxonomy/SINGULAR.rss.xml&lt;/li&gt;
&lt;li&gt;/themes/THEME/layouts/_default/rss.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后在 &lt;strong&gt;/layouts/partials/header.html&lt;/strong&gt; 中的 &lt;strong&gt;head&lt;/strong&gt; 标签内加入下面这段代码即可.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;{{ if .RSSlink }}
  &amp;lt;link href=&amp;quot;{{ .RSSlink }}&amp;quot; rel=&amp;quot;alternate&amp;quot; type=&amp;quot;application/rss+xml&amp;quot; title=&amp;quot;{{ .Site.Title }}&amp;quot; /&amp;gt;
  &amp;lt;link href=&amp;quot;{{ .RSSlink }}&amp;quot; rel=&amp;quot;feed&amp;quot; type=&amp;quot;application/rss+xml&amp;quot; title=&amp;quot;{{ .Site.Title }}&amp;quot; /&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后将你的RSS链接 &lt;strong&gt;(yourwebsite/index.xml)&lt;/strong&gt; 加入你想加到的地方就行了.&lt;/p&gt;

&lt;h3 id=&#34;自定义图片的css样式:49f2d3cb5c8cde2db974e263077945f1&#34;&gt;自定义图片的css样式&lt;/h3&gt;

&lt;p&gt;在 &lt;strong&gt;yourwebsite/static/static/css/style.css&lt;/strong&gt; 中找到img标签定义想要生成的图片效果.&lt;/p&gt;

&lt;p&gt;就像这样:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;figure{position:relative}
figure img,figure object,figure embed,figure video{max-width:100%;display:block}
img{border:0;-ms-interpolation-mode:bicubic;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加过后:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;figure{position:relative}
figure img,figure object,figure embed,figure video{max-width:100%;display:block}
img{border:0;-ms-interpolation-mode:bicubic;display: block;
    box-shadow: 0 0 10px #555;
    border-radius: 4px;
    margin-left: 0px;
    margin-right: auto;
    margin-top: 5px;
    margin-bottom: 5px;
    -webkit-box-shadow: 0 0 10px #555;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个是扒&lt;a href=&#34;www.yinwang.org&#34;&gt;王垠博客&lt;/a&gt;的图片的样式,看着高上大就拿过来用了.稍微改了下,自己觉得喜欢就好.当修改过后博客右上角的 &lt;strong&gt;GitHub Ribbons&lt;/strong&gt; 也变成了这种样式,如果不喜欢的话可以单独在你定义 &lt;strong&gt;GitHub Ribbons&lt;/strong&gt; 的html中修改回来.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img style=&amp;quot;position: absolute; top: 0; right: 0; border: 0;display: block;
    box-shadow: 0 0 0px #000;
    border-radius: 0px;
    margin-left: auto;
    margin-right: auto;
    margin-top: 0px;
    margin-bottom: 0px;
    -webkit-box-shadow: 0 0 0px #000;&amp;quot; 
    alt=&amp;quot;...&amp;quot;
    src=&amp;quot;...&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;排序:49f2d3cb5c8cde2db974e263077945f1&#34;&gt;排序&lt;/h3&gt;

&lt;p&gt;如果你想让自己的某些文章置顶或者让某些文章不那么排在前边的话,就可以用到这段介绍了.像我写些日记什么的,没什么价值,就希望放在后边啦.&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&#34;http://gohugo.io/content/ordering/&#34;&gt;http://gohugo.io/content/ordering/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在 &lt;strong&gt;config.toml&lt;/strong&gt; 中添加 &lt;strong&gt;weight&lt;/strong&gt; 属性,weight的值越高越排在后边.至于最大最小我也不知道,有兴趣的可以去看&lt;a href=&#34;https://github.com/spf13/hugo/&#34;&gt;源码&lt;/a&gt;.尝试过1-100都可以,好像这基本就够大家的需要了.&lt;/p&gt;

&lt;p&gt;示例:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
weight = 100
date = &amp;quot;2015-12-15T00:38:58+08:00&amp;quot;
draft = false
title = &amp;quot;title&amp;quot;
tags = [&amp;quot;tags&amp;quot;]
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;制作icon:49f2d3cb5c8cde2db974e263077945f1&#34;&gt;制作icon&lt;/h3&gt;

&lt;p&gt;推荐 &lt;em&gt;&lt;a href=&#34;http://www.faviconer.com/&#34;&gt;http://www.faviconer.com/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;域名选择:49f2d3cb5c8cde2db974e263077945f1&#34;&gt;域名选择&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;推荐西部数码,阿里云,Goddy.&lt;/li&gt;
&lt;li&gt;DNS解析推荐 &lt;em&gt;dnspod&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;我自己选的域名是xyz,第一年4元.流量用的 &lt;em&gt;Github Pages&lt;/em&gt; .&lt;/li&gt;
&lt;li&gt;推荐云存储空间使用 &lt;em&gt;七牛云&lt;/em&gt; ,不仅免费而且速度也很快.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;建站心得:49f2d3cb5c8cde2db974e263077945f1&#34;&gt;建站心得&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;第一次运行时,命令用 &lt;em&gt;hugo&lt;/em&gt; 即可.如果用 &lt;em&gt;hugo server&lt;/em&gt; ,那么生成的文件BaseURL都是 &lt;em&gt;localhost:1313&lt;/em&gt; .就因为这个问题我纠结过一天,甚至写了个java文件遍历所有的文件替换字符串&amp;hellip;&lt;/li&gt;
&lt;li&gt;有的东西多试试就明白了,看着怎么都不懂,把东西改改看网页有什么变化就清晰明了了.&lt;/li&gt;
&lt;li&gt;上传到 &lt;em&gt;Github Pages&lt;/em&gt; 会有延迟,如果刷不出网页,请耐心等待.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;结语:49f2d3cb5c8cde2db974e263077945f1&#34;&gt;结语&lt;/h3&gt;

&lt;p&gt;马上就两点了,明儿还得早起上班.就先写到这儿了,如果有什么不明白的.
  Hugo交流群:512499080.&lt;/p&gt;

&lt;p&gt;Hugo中文文档网站：&lt;a href=&#34;http://www.gohugo.org/&#34;&gt;http://www.gohugo.org/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;相信这里的朋友会帮你解决问题的.
  第一次这么隆重地写博客,想想也挺开心的.&lt;/p&gt;

&lt;p&gt;最后,祝好:)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015.12.15 周记</title>
      <link>http://isunxu.xyz/thinking/2015-12-15-diary/</link>
      <pubDate>Tue, 15 Dec 2015 00:38:58 +0800</pubDate>
      
      <guid>http://isunxu.xyz/thinking/2015-12-15-diary/</guid>
      <description>

&lt;h1 id=&#34;上周随想:d814fabfbd9c067f076c15c591048487&#34;&gt;上周随想&lt;/h1&gt;

&lt;p&gt;好像每天过了11点才会进入状态..&lt;/p&gt;

&lt;p&gt;电脑里放着许巍的歌,今天很累可还是舍不得去睡觉,总感觉再去干点什么.&lt;/p&gt;

&lt;p&gt;回忆上周已经记不清自己干了些什么.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;搭了个个人博客,马马虎虎地写了两篇.&lt;/li&gt;
&lt;li&gt;看了《Android群英传》120页左右.&lt;/li&gt;
&lt;li&gt;对着 &lt;em&gt;Android Training&lt;/em&gt; 看到了&lt;a href=&#34;http://developer.android.com/intl/zh-cn/training/displaying-bitmaps/index.html&#34;&gt;第四章第一节 Displaying Bitmaps Efficiently&lt;/a&gt;,相对于全部刚刚看了不到&lt;strong&gt;&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;别的记不起来了.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上周感觉自己成长了的时候就是看了王垠的&lt;a href=&#34;http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy/&#34;&gt;《编程与智慧》&lt;/a&gt;.认真地看了每一段并在内心鼓掌叫好,艳羡王垠的才华.思考真是一个可贵的品质.让你的人跟代码上升一个档次.给人与众不同的感觉.程序员是不是也因此分类,会思考的程序员,不会思考的程序员.前者慢慢变成了真正的程序员,后者堕为码农.而我现在连个码农都不是.&lt;/p&gt;

&lt;p&gt;我会加油先变成一个码农的,然后努力成为一个真正的程序员的:)&lt;/p&gt;

&lt;h1 id=&#34;本周计划:d814fabfbd9c067f076c15c591048487&#34;&gt;本周计划&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;看完《Android群英传》的第&lt;strong&gt;绘图机制&lt;/strong&gt;与&lt;strong&gt;动画机制&lt;/strong&gt;章节.&lt;/li&gt;
&lt;li&gt;看到 &lt;em&gt;Android Training&lt;/em&gt; 中第七章 &lt;em&gt;Building Apps with User Info &amp;amp; Sign-In&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;阅读《50 Android Hacks》.&lt;/li&gt;
&lt;li&gt;剩下的就是写代码跟上班了.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对了上周末请老姐吃了顿呷浦,然后去买了件毛衣,双12六折,很happy.&lt;/p&gt;

&lt;p&gt;把Android Studio升级到了2.0 perview 3体验了下InstantRun.&lt;/p&gt;

&lt;p&gt;在Mac上新装了好多提高效率的工具,都试了试,确实好用.&lt;/p&gt;

&lt;p&gt;好了就记这些吧,给自己加油!&lt;/p&gt;

&lt;p&gt;晚安:)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>